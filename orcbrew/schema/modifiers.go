// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2018-08-29 22:59:55.80974 &#43;0200 CEST m=&#43;0.001870473

package schema

import (
	"encoding/json"
	"fmt"
)

type levelModifierType string

type LevelModifier interface{
	Type() levelModifierType
}

type LevelModifierList []LevelModifier

func (list *LevelModifierList) UnmarshalJSON(b []byte) error {
	var rawList []*json.RawMessage
	err := json.Unmarshal(b, &rawList)
	if err != nil {
		return err
	}

	if len(rawList) == 0 {
		*list = make([]LevelModifier, 0)
	}

	var m map[string]interface{}
	for _, rawMessage := range rawList {
		err = json.Unmarshal(*rawMessage, &m)
		if err != nil {
			return err
		}

		entryType, ok := m["type"].(string)
		if !ok {
			return fmt.Errorf("Value type in map was not a string")
		}

		var entry LevelModifier
		switch entryType {

		case "armor-prof":
			entry = &ModifierArmorProficiency{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "damage-immunity":
			entry = &ModifierDamageImmunity{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "damage-resistance":
			entry = &ModifierDamageResistance{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "flying-speed":
			entry = &ModifierFlyingSpeed{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "flying-speed-equals-walking-speed":
			entry = &ModifierFlyingSpeedEqualsWalkingSpeed{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "num-attacks":
			entry = &ModifierExtraAttacks{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "saving-throw-advantage":
			entry = &ModifierSavingThrowAdvantage{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "skill-prof":
			entry = &ModifierSkillProficiency{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "spell":
			entry = &ModifierSpell{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "swimming-speed":
			entry = &ModifierSwimmingSpeed{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "tool-prof":
			entry = &ModifierToolProficiency{}
			err = json.Unmarshal(*rawMessage, &entry)

		case "weapon-prof":
			entry = &ModifierWeaponProficiency{}
			err = json.Unmarshal(*rawMessage, &entry)

		default:
			return fmt.Errorf("Got unknown type: %s", entryType)
		}

		if err != nil {
			return err
		}

		*list = append(*list, entry)
	}

	return nil
}


type ModifierArmorProficiency struct {
	Level int
	Value Armor
}

func (m *ModifierArmorProficiency) Type() levelModifierType {
	return "armor-prof"
}

func (m *ModifierArmorProficiency) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierDamageImmunity struct {
	Level int
	Value Damage
}

func (m *ModifierDamageImmunity) Type() levelModifierType {
	return "damage-immunity"
}

func (m *ModifierDamageImmunity) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierDamageResistance struct {
	Level int
	Value Damage
}

func (m *ModifierDamageResistance) Type() levelModifierType {
	return "damage-resistance"
}

func (m *ModifierDamageResistance) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierFlyingSpeed struct {
	Level int
	Value int
}

func (m *ModifierFlyingSpeed) Type() levelModifierType {
	return "flying-speed"
}

func (m *ModifierFlyingSpeed) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierFlyingSpeedEqualsWalkingSpeed struct {
	Level int
	Value int
}

func (m *ModifierFlyingSpeedEqualsWalkingSpeed) Type() levelModifierType {
	return "flying-speed-equals-walking-speed"
}

func (m *ModifierFlyingSpeedEqualsWalkingSpeed) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierExtraAttacks struct {
	Level int
	Value int
}

func (m *ModifierExtraAttacks) Type() levelModifierType {
	return "num-attacks"
}

func (m *ModifierExtraAttacks) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierSavingThrowAdvantage struct {
	Level int
	Value Condition
}

func (m *ModifierSavingThrowAdvantage) Type() levelModifierType {
	return "saving-throw-advantage"
}

func (m *ModifierSavingThrowAdvantage) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierSkillProficiency struct {
	Level int
	Value Skill
}

func (m *ModifierSkillProficiency) Type() levelModifierType {
	return "skill-prof"
}

func (m *ModifierSkillProficiency) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierSpell struct {
	Level int
	Value SpellWithAbility
}

func (m *ModifierSpell) Type() levelModifierType {
	return "spell"
}

func (m *ModifierSpell) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierSwimmingSpeed struct {
	Level int
	Value int
}

func (m *ModifierSwimmingSpeed) Type() levelModifierType {
	return "swimming-speed"
}

func (m *ModifierSwimmingSpeed) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierToolProficiency struct {
	Level int
	Value string
}

func (m *ModifierToolProficiency) Type() levelModifierType {
	return "tool-prof"
}

func (m *ModifierToolProficiency) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}

type ModifierWeaponProficiency struct {
	Level int
	Value string
}

func (m *ModifierWeaponProficiency) Type() levelModifierType {
	return "weapon-prof"
}

func (m *ModifierWeaponProficiency) MarshalJSON() (b []byte, e error) {
	var valueMap = map[string]interface{}{
		"type": m.Type(),
		"value": m.Value,
	}

	if m.Level != 0 {
		valueMap["level"] = m.Level
	}
	return json.Marshal(valueMap)
}




var _ LevelModifier = &ModifierArmorProficiency{}

var _ LevelModifier = &ModifierDamageImmunity{}

var _ LevelModifier = &ModifierDamageResistance{}

var _ LevelModifier = &ModifierFlyingSpeed{}

var _ LevelModifier = &ModifierFlyingSpeedEqualsWalkingSpeed{}

var _ LevelModifier = &ModifierExtraAttacks{}

var _ LevelModifier = &ModifierSavingThrowAdvantage{}

var _ LevelModifier = &ModifierSkillProficiency{}

var _ LevelModifier = &ModifierSpell{}

var _ LevelModifier = &ModifierSwimmingSpeed{}

var _ LevelModifier = &ModifierToolProficiency{}

var _ LevelModifier = &ModifierWeaponProficiency{}

